#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceWizard
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FeedbackApp")]
	public partial class FeedbackDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertfeedback(feedback instance);
    partial void Updatefeedback(feedback instance);
    partial void Deletefeedback(feedback instance);
    partial void Insertmodules(modules instance);
    partial void Updatemodules(modules instance);
    partial void Deletemodules(modules instance);
    partial void InsertLecturer(Lecturer instance);
    partial void UpdateLecturer(Lecturer instance);
    partial void DeleteLecturer(Lecturer instance);
    partial void Insertstudent(student instance);
    partial void Updatestudent(student instance);
    partial void Deletestudent(student instance);
    #endregion
		
		public FeedbackDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FeedbackAppConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FeedbackDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FeedbackDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FeedbackDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FeedbackDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<feedback> feedbacks
		{
			get
			{
				return this.GetTable<feedback>();
			}
		}
		
		public System.Data.Linq.Table<modules> modules
		{
			get
			{
				return this.GetTable<modules>();
			}
		}
		
		public System.Data.Linq.Table<Lecturer> Lecturers
		{
			get
			{
				return this.GetTable<Lecturer>();
			}
		}
		
		public System.Data.Linq.Table<student> students
		{
			get
			{
				return this.GetTable<student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.feedback")]
	public partial class feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FID;
		
		private int _studentID;
		
		private int _moduleID;
		
		private int _teacherID;
		
		private string _Feedback1;
		
		private int _lectureRating;
		
		private System.Nullable<System.DateTime> _date;
		
		private EntityRef<modules> _modules;
		
		private EntityRef<Lecturer> _Lecturer;
		
		private EntityRef<student> _student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFIDChanging(int value);
    partial void OnFIDChanged();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnmoduleIDChanging(int value);
    partial void OnmoduleIDChanged();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void OnFeedback1Changing(string value);
    partial void OnFeedback1Changed();
    partial void OnlectureRatingChanging(int value);
    partial void OnlectureRatingChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    #endregion
		
		public feedback()
		{
			this._modules = default(EntityRef<modules>);
			this._Lecturer = default(EntityRef<Lecturer>);
			this._student = default(EntityRef<student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FID
		{
			get
			{
				return this._FID;
			}
			set
			{
				if ((this._FID != value))
				{
					this.OnFIDChanging(value);
					this.SendPropertyChanging();
					this._FID = value;
					this.SendPropertyChanged("FID");
					this.OnFIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL")]
		public int studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					if (this._student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleID", DbType="Int NOT NULL")]
		public int moduleID
		{
			get
			{
				return this._moduleID;
			}
			set
			{
				if ((this._moduleID != value))
				{
					if (this._modules.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmoduleIDChanging(value);
					this.SendPropertyChanging();
					this._moduleID = value;
					this.SendPropertyChanged("moduleID");
					this.OnmoduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", DbType="Int NOT NULL")]
		public int teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					if (this._Lecturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Feedback", Storage="_Feedback1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Feedback1
		{
			get
			{
				return this._Feedback1;
			}
			set
			{
				if ((this._Feedback1 != value))
				{
					this.OnFeedback1Changing(value);
					this.SendPropertyChanging();
					this._Feedback1 = value;
					this.SendPropertyChanged("Feedback1");
					this.OnFeedback1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lectureRating", DbType="Int NOT NULL")]
		public int lectureRating
		{
			get
			{
				return this._lectureRating;
			}
			set
			{
				if ((this._lectureRating != value))
				{
					this.OnlectureRatingChanging(value);
					this.SendPropertyChanging();
					this._lectureRating = value;
					this.SendPropertyChanged("lectureRating");
					this.OnlectureRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="modules_feedback", Storage="_modules", ThisKey="moduleID", OtherKey="moduleID", IsForeignKey=true)]
		public modules modules
		{
			get
			{
				return this._modules.Entity;
			}
			set
			{
				modules previousValue = this._modules.Entity;
				if (((previousValue != value) 
							|| (this._modules.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._modules.Entity = null;
						previousValue.feedbacks.Remove(this);
					}
					this._modules.Entity = value;
					if ((value != null))
					{
						value.feedbacks.Add(this);
						this._moduleID = value.moduleID;
					}
					else
					{
						this._moduleID = default(int);
					}
					this.SendPropertyChanged("modules");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_feedback", Storage="_Lecturer", ThisKey="teacherID", OtherKey="teacherID", IsForeignKey=true)]
		public Lecturer Lecturer
		{
			get
			{
				return this._Lecturer.Entity;
			}
			set
			{
				Lecturer previousValue = this._Lecturer.Entity;
				if (((previousValue != value) 
							|| (this._Lecturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lecturer.Entity = null;
						previousValue.feedbacks.Remove(this);
					}
					this._Lecturer.Entity = value;
					if ((value != null))
					{
						value.feedbacks.Add(this);
						this._teacherID = value.teacherID;
					}
					else
					{
						this._teacherID = default(int);
					}
					this.SendPropertyChanged("Lecturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_feedback", Storage="_student", ThisKey="studentID", OtherKey="studentID", IsForeignKey=true)]
		public student student
		{
			get
			{
				return this._student.Entity;
			}
			set
			{
				student previousValue = this._student.Entity;
				if (((previousValue != value) 
							|| (this._student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._student.Entity = null;
						previousValue.feedbacks.Remove(this);
					}
					this._student.Entity = value;
					if ((value != null))
					{
						value.feedbacks.Add(this);
						this._studentID = value.studentID;
					}
					else
					{
						this._studentID = default(int);
					}
					this.SendPropertyChanged("student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.modules")]
	public partial class modules : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _moduleID;
		
		private string _moduleName;
		
		private string _moduleCode;
		
		private EntitySet<feedback> _feedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmoduleIDChanging(int value);
    partial void OnmoduleIDChanged();
    partial void OnmoduleNameChanging(string value);
    partial void OnmoduleNameChanged();
    partial void OnmoduleCodeChanging(string value);
    partial void OnmoduleCodeChanged();
    #endregion
		
		public modules()
		{
			this._feedbacks = new EntitySet<feedback>(new Action<feedback>(this.attach_feedbacks), new Action<feedback>(this.detach_feedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int moduleID
		{
			get
			{
				return this._moduleID;
			}
			set
			{
				if ((this._moduleID != value))
				{
					this.OnmoduleIDChanging(value);
					this.SendPropertyChanging();
					this._moduleID = value;
					this.SendPropertyChanged("moduleID");
					this.OnmoduleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string moduleName
		{
			get
			{
				return this._moduleName;
			}
			set
			{
				if ((this._moduleName != value))
				{
					this.OnmoduleNameChanging(value);
					this.SendPropertyChanging();
					this._moduleName = value;
					this.SendPropertyChanged("moduleName");
					this.OnmoduleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moduleCode", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string moduleCode
		{
			get
			{
				return this._moduleCode;
			}
			set
			{
				if ((this._moduleCode != value))
				{
					this.OnmoduleCodeChanging(value);
					this.SendPropertyChanging();
					this._moduleCode = value;
					this.SendPropertyChanged("moduleCode");
					this.OnmoduleCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="modules_feedback", Storage="_feedbacks", ThisKey="moduleID", OtherKey="moduleID")]
		public EntitySet<feedback> feedbacks
		{
			get
			{
				return this._feedbacks;
			}
			set
			{
				this._feedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.modules = this;
		}
		
		private void detach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.modules = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lecturers")]
	public partial class Lecturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _teacherID;
		
		private string _teacherName;
		
		private EntitySet<feedback> _feedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnteacherIDChanging(int value);
    partial void OnteacherIDChanged();
    partial void OnteacherNameChanging(string value);
    partial void OnteacherNameChanged();
    #endregion
		
		public Lecturer()
		{
			this._feedbacks = new EntitySet<feedback>(new Action<feedback>(this.attach_feedbacks), new Action<feedback>(this.detach_feedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int teacherID
		{
			get
			{
				return this._teacherID;
			}
			set
			{
				if ((this._teacherID != value))
				{
					this.OnteacherIDChanging(value);
					this.SendPropertyChanging();
					this._teacherID = value;
					this.SendPropertyChanged("teacherID");
					this.OnteacherIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacherName", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string teacherName
		{
			get
			{
				return this._teacherName;
			}
			set
			{
				if ((this._teacherName != value))
				{
					this.OnteacherNameChanging(value);
					this.SendPropertyChanging();
					this._teacherName = value;
					this.SendPropertyChanged("teacherName");
					this.OnteacherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lecturer_feedback", Storage="_feedbacks", ThisKey="teacherID", OtherKey="teacherID")]
		public EntitySet<feedback> feedbacks
		{
			get
			{
				return this._feedbacks;
			}
			set
			{
				this._feedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = this;
		}
		
		private void detach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.Lecturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students")]
	public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studentID;
		
		private string _studentFName;
		
		private string _studentLName;
		
		private int _courseID;
		
		private string _password;
		
		private EntitySet<feedback> _feedbacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnstudentFNameChanging(string value);
    partial void OnstudentFNameChanged();
    partial void OnstudentLNameChanging(string value);
    partial void OnstudentLNameChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public student()
		{
			this._feedbacks = new EntitySet<feedback>(new Action<feedback>(this.attach_feedbacks), new Action<feedback>(this.detach_feedbacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentFName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string studentFName
		{
			get
			{
				return this._studentFName;
			}
			set
			{
				if ((this._studentFName != value))
				{
					this.OnstudentFNameChanging(value);
					this.SendPropertyChanging();
					this._studentFName = value;
					this.SendPropertyChanged("studentFName");
					this.OnstudentFNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentLName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string studentLName
		{
			get
			{
				return this._studentLName;
			}
			set
			{
				if ((this._studentLName != value))
				{
					this.OnstudentLNameChanging(value);
					this.SendPropertyChanging();
					this._studentLName = value;
					this.SendPropertyChanged("studentLName");
					this.OnstudentLNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_feedback", Storage="_feedbacks", ThisKey="studentID", OtherKey="studentID")]
		public EntitySet<feedback> feedbacks
		{
			get
			{
				return this._feedbacks;
			}
			set
			{
				this._feedbacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.student = this;
		}
		
		private void detach_feedbacks(feedback entity)
		{
			this.SendPropertyChanging();
			entity.student = null;
		}
	}
}
#pragma warning restore 1591
