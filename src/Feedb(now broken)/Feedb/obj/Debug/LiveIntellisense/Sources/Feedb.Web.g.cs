//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Feedb
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using Feedb.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace Feedb.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using Feedb.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("Feedb-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'fbs' DomainService.
    /// </summary>
    public sealed partial class fbs : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="fbs"/> class.
        /// </summary>
        public fbs() : 
                this(new WebDomainClient<IfbsContract>(new Uri("Feedb-Web-fbs.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="fbs"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The fbs service URI.</param>
        public fbs(Uri serviceUri) : 
                this(new WebDomainClient<IfbsContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="fbs"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public fbs(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="feedback"/> entity instances that have been loaded into this <see cref="fbs"/> instance.
        /// </summary>
        public EntitySet<feedback> feedbacks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<feedback>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Lecturer"/> entity instances that have been loaded into this <see cref="fbs"/> instance.
        /// </summary>
        public EntitySet<Lecturer> Lecturers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Lecturer>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="module"/> entity instances that have been loaded into this <see cref="fbs"/> instance.
        /// </summary>
        public EntitySet<module> modules
        {
            get
            {
                return base.EntityContainer.GetEntitySet<module>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="student"/> entity instances that have been loaded into this <see cref="fbs"/> instance.
        /// </summary>
        public EntitySet<student> students
        {
            get
            {
                return base.EntityContainer.GetEntitySet<student>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="user"/> entity instances that have been loaded into this <see cref="fbs"/> instance.
        /// </summary>
        public EntitySet<user> users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<user>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="feedback"/> entity instances using the 'GetFeedbacks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="feedback"/> entity instances.</returns>
        public EntityQuery<feedback> GetFeedbacksQuery()
        {
            this.ValidateMethod("GetFeedbacksQuery", null);
            return base.CreateQuery<feedback>("GetFeedbacks", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Lecturer"/> entity instances using the 'GetLecturers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Lecturer"/> entity instances.</returns>
        public EntityQuery<Lecturer> GetLecturersQuery()
        {
            this.ValidateMethod("GetLecturersQuery", null);
            return base.CreateQuery<Lecturer>("GetLecturers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="module"/> entity instances using the 'GetModules' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="module"/> entity instances.</returns>
        public EntityQuery<module> GetModulesQuery()
        {
            this.ValidateMethod("GetModulesQuery", null);
            return base.CreateQuery<module>("GetModules", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="student"/> entity instances using the 'GetStudents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="student"/> entity instances.</returns>
        public EntityQuery<student> GetStudentsQuery()
        {
            this.ValidateMethod("GetStudentsQuery", null);
            return base.CreateQuery<student>("GetStudents", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="user"/> entity instances using the 'GetUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="user"/> entity instances.</returns>
        public EntityQuery<user> GetUsersQuery()
        {
            this.ValidateMethod("GetUsersQuery", null);
            return base.CreateQuery<user>("GetUsers", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new fbsEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'fbs' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IfbsContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetFeedbacks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/fbs/GetFeedbacksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/fbs/GetFeedbacks", ReplyAction="http://tempuri.org/fbs/GetFeedbacksResponse")]
            [WebGet()]
            IAsyncResult BeginGetFeedbacks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFeedbacks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFeedbacks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFeedbacks' operation.</returns>
            QueryResult<feedback> EndGetFeedbacks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetLecturers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/fbs/GetLecturersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/fbs/GetLecturers", ReplyAction="http://tempuri.org/fbs/GetLecturersResponse")]
            [WebGet()]
            IAsyncResult BeginGetLecturers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLecturers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLecturers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLecturers' operation.</returns>
            QueryResult<Lecturer> EndGetLecturers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetModules' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/fbs/GetModulesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/fbs/GetModules", ReplyAction="http://tempuri.org/fbs/GetModulesResponse")]
            [WebGet()]
            IAsyncResult BeginGetModules(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetModules'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetModules'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetModules' operation.</returns>
            QueryResult<module> EndGetModules(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStudents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/fbs/GetStudentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/fbs/GetStudents", ReplyAction="http://tempuri.org/fbs/GetStudentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStudents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStudents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStudents' operation.</returns>
            QueryResult<student> EndGetStudents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/fbs/GetUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/fbs/GetUsers", ReplyAction="http://tempuri.org/fbs/GetUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUsers' operation.</returns>
            QueryResult<user> EndGetUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/fbs/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/fbs/SubmitChanges", ReplyAction="http://tempuri.org/fbs/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class fbsEntityContainer : EntityContainer
        {
            
            public fbsEntityContainer()
            {
                this.CreateEntitySet<feedback>(EntitySetOperations.All);
                this.CreateEntitySet<Lecturer>(EntitySetOperations.None);
                this.CreateEntitySet<module>(EntitySetOperations.None);
                this.CreateEntitySet<student>(EntitySetOperations.None);
                this.CreateEntitySet<user>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'feedback' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class feedback : Entity
    {
        
        private Nullable<DateTime> _date;
        
        private string _feedback1;
        
        private int _fid;
        
        private EntityRef<Lecturer> _lecturer;
        
        private int _lectureRating;
        
        private EntityRef<module> _module;
        
        private int _moduleID;
        
        private EntityRef<student> _student;
        
        private int _studentID;
        
        private int _teacherID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OndateChanging(Nullable<DateTime> value);
        partial void OndateChanged();
        partial void OnFeedback1Changing(string value);
        partial void OnFeedback1Changed();
        partial void OnFIDChanging(int value);
        partial void OnFIDChanged();
        partial void OnlectureRatingChanging(int value);
        partial void OnlectureRatingChanged();
        partial void OnmoduleIDChanging(int value);
        partial void OnmoduleIDChanged();
        partial void OnstudentIDChanging(int value);
        partial void OnstudentIDChanged();
        partial void OnteacherIDChanging(int value);
        partial void OnteacherIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="feedback"/> class.
        /// </summary>
        public feedback()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'date' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OndateChanging(value);
                    this.RaiseDataMemberChanging("date");
                    this.ValidateProperty("date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("date");
                    this.OndateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Feedback1' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string Feedback1
        {
            get
            {
                return this._feedback1;
            }
            set
            {
                if ((this._feedback1 != value))
                {
                    this.OnFeedback1Changing(value);
                    this.RaiseDataMemberChanging("Feedback1");
                    this.ValidateProperty("Feedback1", value);
                    this._feedback1 = value;
                    this.RaiseDataMemberChanged("Feedback1");
                    this.OnFeedback1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int FID
        {
            get
            {
                return this._fid;
            }
            set
            {
                if ((this._fid != value))
                {
                    this.OnFIDChanging(value);
                    this.ValidateProperty("FID", value);
                    this._fid = value;
                    this.RaisePropertyChanged("FID");
                    this.OnFIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Lecturer"/> entity.
        /// </summary>
        [Association("Lecturer_feedback", "teacherID", "teacherID", IsForeignKey=true)]
        [XmlIgnore()]
        public Lecturer Lecturer
        {
            get
            {
                if ((this._lecturer == null))
                {
                    this._lecturer = new EntityRef<Lecturer>(this, "Lecturer", this.FilterLecturer);
                }
                return this._lecturer.Entity;
            }
            set
            {
                Lecturer previous = this.Lecturer;
                if ((previous != value))
                {
                    this.ValidateProperty("Lecturer", value);
                    if ((previous != null))
                    {
                        this._lecturer.Entity = null;
                        previous.feedbacks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.teacherID = value.teacherID;
                    }
                    else
                    {
                        this.teacherID = default(int);
                    }
                    this._lecturer.Entity = value;
                    if ((value != null))
                    {
                        value.feedbacks.Add(this);
                    }
                    this.RaisePropertyChanged("Lecturer");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'lectureRating' value.
        /// </summary>
        [DataMember()]
        public int lectureRating
        {
            get
            {
                return this._lectureRating;
            }
            set
            {
                if ((this._lectureRating != value))
                {
                    this.OnlectureRatingChanging(value);
                    this.RaiseDataMemberChanging("lectureRating");
                    this.ValidateProperty("lectureRating", value);
                    this._lectureRating = value;
                    this.RaiseDataMemberChanged("lectureRating");
                    this.OnlectureRatingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="module"/> entity.
        /// </summary>
        [Association("module_feedback", "moduleID", "moduleID", IsForeignKey=true)]
        [XmlIgnore()]
        public module module
        {
            get
            {
                if ((this._module == null))
                {
                    this._module = new EntityRef<module>(this, "module", this.Filtermodule);
                }
                return this._module.Entity;
            }
            set
            {
                module previous = this.module;
                if ((previous != value))
                {
                    this.ValidateProperty("module", value);
                    if ((previous != null))
                    {
                        this._module.Entity = null;
                        previous.feedbacks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.moduleID = value.moduleID;
                    }
                    else
                    {
                        this.moduleID = default(int);
                    }
                    this._module.Entity = value;
                    if ((value != null))
                    {
                        value.feedbacks.Add(this);
                    }
                    this.RaisePropertyChanged("module");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'moduleID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int moduleID
        {
            get
            {
                return this._moduleID;
            }
            set
            {
                if ((this._moduleID != value))
                {
                    this.OnmoduleIDChanging(value);
                    this.RaiseDataMemberChanging("moduleID");
                    this.ValidateProperty("moduleID", value);
                    this._moduleID = value;
                    this.RaiseDataMemberChanged("moduleID");
                    this.OnmoduleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="student"/> entity.
        /// </summary>
        [Association("student_feedback", "studentID", "studentID", IsForeignKey=true)]
        [XmlIgnore()]
        public student student
        {
            get
            {
                if ((this._student == null))
                {
                    this._student = new EntityRef<student>(this, "student", this.Filterstudent);
                }
                return this._student.Entity;
            }
            set
            {
                student previous = this.student;
                if ((previous != value))
                {
                    this.ValidateProperty("student", value);
                    if ((previous != null))
                    {
                        this._student.Entity = null;
                        previous.feedbacks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.studentID = value.studentID;
                    }
                    else
                    {
                        this.studentID = default(int);
                    }
                    this._student.Entity = value;
                    if ((value != null))
                    {
                        value.feedbacks.Add(this);
                    }
                    this.RaisePropertyChanged("student");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'studentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int studentID
        {
            get
            {
                return this._studentID;
            }
            set
            {
                if ((this._studentID != value))
                {
                    this.OnstudentIDChanging(value);
                    this.RaiseDataMemberChanging("studentID");
                    this.ValidateProperty("studentID", value);
                    this._studentID = value;
                    this.RaiseDataMemberChanged("studentID");
                    this.OnstudentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'teacherID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int teacherID
        {
            get
            {
                return this._teacherID;
            }
            set
            {
                if ((this._teacherID != value))
                {
                    this.OnteacherIDChanging(value);
                    this.RaiseDataMemberChanging("teacherID");
                    this.ValidateProperty("teacherID", value);
                    this._teacherID = value;
                    this.RaiseDataMemberChanged("teacherID");
                    this.OnteacherIDChanged();
                }
            }
        }
        
        private bool FilterLecturer(Lecturer entity)
        {
            return (entity.teacherID == this.teacherID);
        }
        
        private bool Filtermodule(module entity)
        {
            return (entity.moduleID == this.moduleID);
        }
        
        private bool Filterstudent(student entity)
        {
            return (entity.studentID == this.studentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._fid;
        }
    }
    
    /// <summary>
    /// The 'Lecturer' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class Lecturer : Entity
    {
        
        private EntityCollection<feedback> _feedbacks;
        
        private string _teacherFirstName;
        
        private int _teacherID;
        
        private string _teacherLastName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnteacherFirstNameChanging(string value);
        partial void OnteacherFirstNameChanged();
        partial void OnteacherIDChanging(int value);
        partial void OnteacherIDChanged();
        partial void OnteacherLastNameChanging(string value);
        partial void OnteacherLastNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Lecturer"/> class.
        /// </summary>
        public Lecturer()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="feedback"/> entity instances.
        /// </summary>
        [Association("Lecturer_feedback", "teacherID", "teacherID")]
        [XmlIgnore()]
        public EntityCollection<feedback> feedbacks
        {
            get
            {
                if ((this._feedbacks == null))
                {
                    this._feedbacks = new EntityCollection<feedback>(this, "feedbacks", this.Filterfeedbacks, this.Attachfeedbacks, this.Detachfeedbacks);
                }
                return this._feedbacks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'teacherFirstName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string teacherFirstName
        {
            get
            {
                return this._teacherFirstName;
            }
            set
            {
                if ((this._teacherFirstName != value))
                {
                    this.OnteacherFirstNameChanging(value);
                    this.RaiseDataMemberChanging("teacherFirstName");
                    this.ValidateProperty("teacherFirstName", value);
                    this._teacherFirstName = value;
                    this.RaiseDataMemberChanged("teacherFirstName");
                    this.OnteacherFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'teacherID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int teacherID
        {
            get
            {
                return this._teacherID;
            }
            set
            {
                if ((this._teacherID != value))
                {
                    this.OnteacherIDChanging(value);
                    this.ValidateProperty("teacherID", value);
                    this._teacherID = value;
                    this.RaisePropertyChanged("teacherID");
                    this.OnteacherIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'teacherLastName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string teacherLastName
        {
            get
            {
                return this._teacherLastName;
            }
            set
            {
                if ((this._teacherLastName != value))
                {
                    this.OnteacherLastNameChanging(value);
                    this.RaiseDataMemberChanging("teacherLastName");
                    this.ValidateProperty("teacherLastName", value);
                    this._teacherLastName = value;
                    this.RaiseDataMemberChanged("teacherLastName");
                    this.OnteacherLastNameChanged();
                }
            }
        }
        
        private void Attachfeedbacks(feedback entity)
        {
            entity.Lecturer = this;
        }
        
        private void Detachfeedbacks(feedback entity)
        {
            entity.Lecturer = null;
        }
        
        private bool Filterfeedbacks(feedback entity)
        {
            return (entity.teacherID == this.teacherID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._teacherID;
        }
    }
    
    /// <summary>
    /// The 'module' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class module : Entity
    {
        
        private EntityCollection<feedback> _feedbacks;
        
        private string _moduleCode;
        
        private int _moduleID;
        
        private string _moduleName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnmoduleCodeChanging(string value);
        partial void OnmoduleCodeChanged();
        partial void OnmoduleIDChanging(int value);
        partial void OnmoduleIDChanged();
        partial void OnmoduleNameChanging(string value);
        partial void OnmoduleNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="module"/> class.
        /// </summary>
        public module()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="feedback"/> entity instances.
        /// </summary>
        [Association("module_feedback", "moduleID", "moduleID")]
        [XmlIgnore()]
        public EntityCollection<feedback> feedbacks
        {
            get
            {
                if ((this._feedbacks == null))
                {
                    this._feedbacks = new EntityCollection<feedback>(this, "feedbacks", this.Filterfeedbacks, this.Attachfeedbacks, this.Detachfeedbacks);
                }
                return this._feedbacks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'moduleCode' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string moduleCode
        {
            get
            {
                return this._moduleCode;
            }
            set
            {
                if ((this._moduleCode != value))
                {
                    this.OnmoduleCodeChanging(value);
                    this.RaiseDataMemberChanging("moduleCode");
                    this.ValidateProperty("moduleCode", value);
                    this._moduleCode = value;
                    this.RaiseDataMemberChanged("moduleCode");
                    this.OnmoduleCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'moduleID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int moduleID
        {
            get
            {
                return this._moduleID;
            }
            set
            {
                if ((this._moduleID != value))
                {
                    this.OnmoduleIDChanging(value);
                    this.ValidateProperty("moduleID", value);
                    this._moduleID = value;
                    this.RaisePropertyChanged("moduleID");
                    this.OnmoduleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'moduleName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        public string moduleName
        {
            get
            {
                return this._moduleName;
            }
            set
            {
                if ((this._moduleName != value))
                {
                    this.OnmoduleNameChanging(value);
                    this.RaiseDataMemberChanging("moduleName");
                    this.ValidateProperty("moduleName", value);
                    this._moduleName = value;
                    this.RaiseDataMemberChanged("moduleName");
                    this.OnmoduleNameChanged();
                }
            }
        }
        
        private void Attachfeedbacks(feedback entity)
        {
            entity.module = this;
        }
        
        private void Detachfeedbacks(feedback entity)
        {
            entity.module = null;
        }
        
        private bool Filterfeedbacks(feedback entity)
        {
            return (entity.moduleID == this.moduleID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._moduleID;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'student' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class student : Entity
    {
        
        private int _courseID;
        
        private EntityCollection<feedback> _feedbacks;
        
        private string _studentFName;
        
        private int _studentID;
        
        private string _studentLName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OncourseIDChanging(int value);
        partial void OncourseIDChanged();
        partial void OnstudentFNameChanging(string value);
        partial void OnstudentFNameChanged();
        partial void OnstudentIDChanging(int value);
        partial void OnstudentIDChanged();
        partial void OnstudentLNameChanging(string value);
        partial void OnstudentLNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="student"/> class.
        /// </summary>
        public student()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'courseID' value.
        /// </summary>
        [DataMember()]
        public int courseID
        {
            get
            {
                return this._courseID;
            }
            set
            {
                if ((this._courseID != value))
                {
                    this.OncourseIDChanging(value);
                    this.RaiseDataMemberChanging("courseID");
                    this.ValidateProperty("courseID", value);
                    this._courseID = value;
                    this.RaiseDataMemberChanged("courseID");
                    this.OncourseIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="feedback"/> entity instances.
        /// </summary>
        [Association("student_feedback", "studentID", "studentID")]
        [XmlIgnore()]
        public EntityCollection<feedback> feedbacks
        {
            get
            {
                if ((this._feedbacks == null))
                {
                    this._feedbacks = new EntityCollection<feedback>(this, "feedbacks", this.Filterfeedbacks, this.Attachfeedbacks, this.Detachfeedbacks);
                }
                return this._feedbacks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'studentFName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string studentFName
        {
            get
            {
                return this._studentFName;
            }
            set
            {
                if ((this._studentFName != value))
                {
                    this.OnstudentFNameChanging(value);
                    this.RaiseDataMemberChanging("studentFName");
                    this.ValidateProperty("studentFName", value);
                    this._studentFName = value;
                    this.RaiseDataMemberChanged("studentFName");
                    this.OnstudentFNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'studentID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int studentID
        {
            get
            {
                return this._studentID;
            }
            set
            {
                if ((this._studentID != value))
                {
                    this.OnstudentIDChanging(value);
                    this.ValidateProperty("studentID", value);
                    this._studentID = value;
                    this.RaisePropertyChanged("studentID");
                    this.OnstudentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'studentLName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string studentLName
        {
            get
            {
                return this._studentLName;
            }
            set
            {
                if ((this._studentLName != value))
                {
                    this.OnstudentLNameChanging(value);
                    this.RaiseDataMemberChanging("studentLName");
                    this.ValidateProperty("studentLName", value);
                    this._studentLName = value;
                    this.RaiseDataMemberChanged("studentLName");
                    this.OnstudentLNameChanged();
                }
            }
        }
        
        private void Attachfeedbacks(feedback entity)
        {
            entity.student = this;
        }
        
        private void Detachfeedbacks(feedback entity)
        {
            entity.student = null;
        }
        
        private bool Filterfeedbacks(feedback entity)
        {
            return (entity.studentID == this.studentID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._studentID;
        }
    }
    
    /// <summary>
    /// The 'user' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class user : Entity
    {
        
        private string _password;
        
        private int _studentID;
        
        private string _studentName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnpasswordChanging(string value);
        partial void OnpasswordChanged();
        partial void OnstudentIDChanging(int value);
        partial void OnstudentIDChanged();
        partial void OnstudentNameChanging(string value);
        partial void OnstudentNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="user"/> class.
        /// </summary>
        public user()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'password' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnpasswordChanging(value);
                    this.ValidateProperty("password", value);
                    this._password = value;
                    this.RaisePropertyChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'studentID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int studentID
        {
            get
            {
                return this._studentID;
            }
            set
            {
                if ((this._studentID != value))
                {
                    this.OnstudentIDChanging(value);
                    this.ValidateProperty("studentID", value);
                    this._studentID = value;
                    this.RaisePropertyChanged("studentID");
                    this.OnstudentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'studentName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(25)]
        public string studentName
        {
            get
            {
                return this._studentName;
            }
            set
            {
                if ((this._studentName != value))
                {
                    this.OnstudentNameChanging(value);
                    this.ValidateProperty("studentName", value);
                    this._studentName = value;
                    this.RaisePropertyChanged("studentName");
                    this.OnstudentNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._password == null) 
                        || (this._studentName == null)))
            {
                return null;
            }
            return EntityKey.Create(this._password, this._studentID, this._studentName);
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Feedb.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("Feedb-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
